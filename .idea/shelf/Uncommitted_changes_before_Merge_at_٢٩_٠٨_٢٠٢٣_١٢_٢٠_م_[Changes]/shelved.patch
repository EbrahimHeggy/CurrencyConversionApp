Index: app/src/main/java/com/example/concurrency/presentation/favorite_screen/FavoriteItem.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.concurrency.presentation.favorite_screen\r\nimport android.content.Context\r\nimport android.content.SharedPreferences\r\nimport androidx.compose.foundation.Image\r\nimport androidx.compose.foundation.layout.*\r\nimport androidx.compose.material3.Checkbox\r\nimport androidx.compose.material3.Text\r\nimport androidx.compose.runtime.*\r\nimport androidx.compose.ui.Alignment\r\nimport androidx.compose.ui.Modifier\r\nimport androidx.compose.ui.graphics.Color\r\nimport androidx.compose.ui.res.painterResource\r\nimport androidx.compose.ui.text.TextStyle\r\nimport androidx.compose.ui.text.font.FontWeight\r\nimport androidx.compose.ui.unit.dp\r\nimport androidx.compose.ui.unit.sp\r\nimport coil.compose.AsyncImage\r\nimport com.example.concurrency.R\r\nimport com.example.concurrency.data.remote.model.DataX\r\n\r\n@Composable\r\nfun FavoriteItem(itemId: Int, context: Context, currency: DataX) {\r\n    var isChecked by remember { mutableStateOf(false) }\r\n\r\n    // Use a unique key for each item\r\n    val itemKey = \"item_$itemId\"\r\n\r\n    // Retrieve the checked state from SharedPreferences with a unique file name\r\n    val sharedPreferences: SharedPreferences = remember {\r\n        context.getSharedPreferences(\"MyPrefs_\", Context.MODE_PRIVATE)\r\n    }\r\n    isChecked = sharedPreferences.getBoolean(itemKey, false)\r\n\r\n    Row(\r\n        modifier = Modifier\r\n            .fillMaxWidth()\r\n            .padding(16.dp),\r\n        verticalAlignment = Alignment.CenterVertically,\r\n        horizontalArrangement = Arrangement.SpaceBetween\r\n    ) {\r\n\r\n        Row {\r\n            AsyncImage(model = currency.imageUrl, contentDescription = \"\")\r\n\r\n            Column(\r\n                modifier = Modifier\r\n                    .padding(start = 8.dp)\r\n            ) {\r\n                Text(\r\n                    text = currency.code,\r\n                    style = TextStyle(\r\n                        fontSize = 14.sp,\r\n                        lineHeight = 23.12.sp,\r\n                        fontWeight = FontWeight(400),\r\n                        color = Color.Black,\r\n                    )\r\n                )\r\n\r\n                Text(\r\n                    text = \"Currency\",\r\n                    style = TextStyle(\r\n                        fontSize = 14.sp,\r\n                        lineHeight = 23.12.sp,\r\n                        fontWeight = FontWeight(400),\r\n                        color = Color.Gray,\r\n                    )\r\n                )\r\n            }\r\n        }\r\n\r\n        Checkbox(\r\n            checked = isChecked,\r\n            onCheckedChange = {\r\n                isChecked = it\r\n                // Save the state in SharedPreferences\r\n                sharedPreferences.edit().putBoolean(itemKey, it).apply()\r\n            }\r\n        )\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/concurrency/presentation/favorite_screen/FavoriteItem.kt b/app/src/main/java/com/example/concurrency/presentation/favorite_screen/FavoriteItem.kt
--- a/app/src/main/java/com/example/concurrency/presentation/favorite_screen/FavoriteItem.kt	(revision 0c812c4e9e4b99ff0b72905709e208c7cc3561e2)
+++ b/app/src/main/java/com/example/concurrency/presentation/favorite_screen/FavoriteItem.kt	(date 1693304434743)
@@ -1,27 +1,40 @@
 package com.example.concurrency.presentation.favorite_screen
+
 import android.content.Context
 import android.content.SharedPreferences
-import androidx.compose.foundation.Image
-import androidx.compose.foundation.layout.*
+import android.util.Log
+import androidx.compose.foundation.layout.Arrangement
+import androidx.compose.foundation.layout.Column
+import androidx.compose.foundation.layout.Row
+import androidx.compose.foundation.layout.fillMaxWidth
+import androidx.compose.foundation.layout.padding
 import androidx.compose.material3.Checkbox
 import androidx.compose.material3.Text
-import androidx.compose.runtime.*
+import androidx.compose.runtime.Composable
+import androidx.compose.runtime.getValue
+import androidx.compose.runtime.mutableStateOf
+import androidx.compose.runtime.remember
+import androidx.compose.runtime.rememberCoroutineScope
+import androidx.compose.runtime.setValue
 import androidx.compose.ui.Alignment
 import androidx.compose.ui.Modifier
 import androidx.compose.ui.graphics.Color
-import androidx.compose.ui.res.painterResource
 import androidx.compose.ui.text.TextStyle
 import androidx.compose.ui.text.font.FontWeight
 import androidx.compose.ui.unit.dp
 import androidx.compose.ui.unit.sp
 import coil.compose.AsyncImage
-import com.example.concurrency.R
+import com.example.concurrency.data.local.CurrencyEntity
+import com.example.concurrency.data.local.FavoriteDatabase
 import com.example.concurrency.data.remote.model.DataX
+import kotlinx.coroutines.launch
 
 @Composable
 fun FavoriteItem(itemId: Int, context: Context, currency: DataX) {
     var isChecked by remember { mutableStateOf(false) }
 
+    val scope = rememberCoroutineScope()
+
     // Use a unique key for each item
     val itemKey = "item_$itemId"
 
@@ -31,6 +44,12 @@
     }
     isChecked = sharedPreferences.getBoolean(itemKey, false)
 
+    // Retrieve the database instance
+    val database: FavoriteDatabase = remember {
+        FavoriteDatabase.getInstance(context)
+    }
+
+
     Row(
         modifier = Modifier
             .fillMaxWidth()
@@ -70,11 +89,30 @@
 
         Checkbox(
             checked = isChecked,
-            onCheckedChange = {
-                isChecked = it
+            onCheckedChange = { newCheckedState ->
+                isChecked = newCheckedState
                 // Save the state in SharedPreferences
-                sharedPreferences.edit().putBoolean(itemKey, it).apply()
+                sharedPreferences.edit().putBoolean(itemKey, newCheckedState).apply()
+
+                // Use the coroutine scope to perform database operations
+                scope.launch {
+                    if (newCheckedState) {
+                        val currencyEntity = CurrencyEntity(
+                            code = currency.code,
+                            imageUrl = currency.imageUrl,
+                            name = currency.name
+                        )
+                        database.currencyDao().insertCurrency(currencyEntity)
+                    } else {
+                        database.currencyDao().deleteCurrencyByCode(currency.code)
+                    }
+                    // Get the list of all currencies in the database and log its size
+                    val allCurrencies = database.currencyDao().getAllCurrencies()
+                    Log.d("Database Size", "Size of all currencies in the database: ${allCurrencies.size}")
+
+                }
             }
         )
     }
 }
+
Index: app/src/main/java/com/example/concurrency/data/repository/CurrencyRepository.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.concurrency.data.repository\r\n\r\nimport com.example.concurrency.data.remote.CurrencyApi\r\nimport com.example.concurrency.data.remote.model.CompareResponse\r\nimport com.example.concurrency.data.remote.model.ConvertResponse\r\nimport com.example.concurrency.data.remote.model.Currencies\r\nimport kotlinx.coroutines.Dispatchers\r\nimport kotlinx.coroutines.withContext\r\nimport javax.inject.Inject\r\n\r\nclass CurrencyRepository @Inject constructor(\r\n    private val api: CurrencyApi\r\n) {\r\n    suspend fun getConversionCurrency(\r\n        base: String,\r\n        target: String,\r\n        amount: Double,\r\n\r\n        ): ConvertResponse {\r\n        return withContext(Dispatchers.IO) {\r\n            api.getConversionCurrency(\r\n               base, target,amount\r\n            )\r\n        }\r\n    }\r\n\r\n    suspend fun getAllCurrencies(): Currencies{\r\n        return withContext(Dispatchers.IO){\r\n            api.getAllCurrencies()\r\n        }\r\n    }\r\n\r\n    suspend fun getComparedCurrency(\r\n        amount: Double,\r\n        base: String,\r\n        target: String,\r\n        target2: String\r\n    ): CompareResponse {\r\n        return withContext(Dispatchers.IO){\r\n            api.getComparedCurrency(\r\n                amount,base, target, target2\r\n            )\r\n        }\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/concurrency/data/repository/CurrencyRepository.kt b/app/src/main/java/com/example/concurrency/data/repository/CurrencyRepository.kt
--- a/app/src/main/java/com/example/concurrency/data/repository/CurrencyRepository.kt	(revision 0c812c4e9e4b99ff0b72905709e208c7cc3561e2)
+++ b/app/src/main/java/com/example/concurrency/data/repository/CurrencyRepository.kt	(date 1693304434743)
@@ -1,5 +1,6 @@
 package com.example.concurrency.data.repository
 
+import FavoriteRates
 import com.example.concurrency.data.remote.CurrencyApi
 import com.example.concurrency.data.remote.model.CompareResponse
 import com.example.concurrency.data.remote.model.ConvertResponse
@@ -9,13 +10,13 @@
 import javax.inject.Inject
 
 class CurrencyRepository @Inject constructor(
-    private val api: CurrencyApi
+    private val api: CurrencyApi,
+
 ) {
     suspend fun getConversionCurrency(
         base: String,
         target: String,
         amount: Double,
-
         ): ConvertResponse {
         return withContext(Dispatchers.IO) {
             api.getConversionCurrency(
@@ -44,12 +45,15 @@
     }
 
 
-
-
-
-
-
-
-
+    suspend fun getFavRates(
+        base: String,
+        currencyCodes: List<String>
+    ): FavoriteRates {
+        return withContext(Dispatchers.IO) {
+            api.postFavoritesCurrencies(
+                base,currencyCodes
+            )
+        }
+    }
 
 }
\ No newline at end of file
Index: app/src/main/java/com/example/concurrency/presentation/convert_screen/ConvertViewModel.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.concurrency.presentation.convert_screen\r\n\r\nimport android.util.Log\r\nimport androidx.lifecycle.ViewModel\r\nimport androidx.lifecycle.viewModelScope\r\nimport com.example.concurrency.domain.usecase.AllUseCases\r\nimport com.example.concurrency.utils.Resource\r\nimport dagger.hilt.android.lifecycle.HiltViewModel\r\nimport kotlinx.coroutines.flow.MutableStateFlow\r\nimport kotlinx.coroutines.flow.asStateFlow\r\nimport kotlinx.coroutines.flow.collectLatest\r\nimport kotlinx.coroutines.flow.update\r\nimport kotlinx.coroutines.launch\r\nimport javax.inject.Inject\r\n\r\n@HiltViewModel\r\nclass ConvertViewModel @Inject constructor(\r\n    private val useCases: AllUseCases,\r\n) : ViewModel() {\r\n\r\n\r\n    private val _currencyState = MutableStateFlow(CurrencyState())\r\n    val currencyState = _currencyState.asStateFlow()\r\n\r\n\r\n    init {\r\n        getAllCurrencies()\r\n    }\r\n\r\n\r\n    fun onEvent(event: ConvertEvent) {\r\n        when (event) {\r\n            is ConvertEvent.SetBase -> {\r\n                _currencyState.update { it.copy(base = event.base) }\r\n            }\r\n\r\n            is ConvertEvent.SetBaseAmount -> {\r\n                _currencyState.update { it.copy(amount = event.amount) }\r\n            }\r\n\r\n            is ConvertEvent.SetTarget -> {\r\n                _currencyState.update { it.copy(target = event.target) }\r\n            }\r\n\r\n            is ConvertEvent.GetConvertedCurrency -> {\r\n                getConvertedCurrency(event.base, event.target, event.amount)\r\n            }\r\n\r\n        }\r\n    }\r\n\r\n\r\n    private fun getAllCurrencies() {\r\n        viewModelScope.launch {\r\n            useCases.getAllCurrenciesUseCase().collectLatest { result ->\r\n                when (result) {\r\n                    is Resource.Error -> {\r\n                        _currencyState.update { state ->\r\n                            state.copy(error = result.message ?: \"\", isLoading = false)\r\n                        }\r\n                        Log.e(\"result Currency\", result.data?.data.toString())\r\n                    }\r\n\r\n                    is Resource.Loading -> {\r\n                        _currencyState.update { it.copy(isLoading = true) }\r\n                        Log.e(\"result Currency\", result.data?.data.toString())\r\n\r\n                    }\r\n\r\n                    is Resource.Success -> {\r\n                        _currencyState.update {\r\n                            it.copy(\r\n                                currencies = result.data,\r\n                                isLoading = false\r\n                            )\r\n                        }\r\n                        Log.e(\"result Currency\", result.data?.data.toString())\r\n                    }\r\n                }\r\n\r\n            }\r\n        }\r\n    }\r\n\r\n    private fun getConvertedCurrency(\r\n        base: String,\r\n        target: String,\r\n        amount: Double,\r\n    ) {\r\n        viewModelScope.launch {\r\n            useCases.getConvertCurrencyUseCase(base, target, amount).collectLatest { result ->\r\n                when (result) {\r\n                    is Resource.Error -> {\r\n                        _currencyState.update {\r\n                            it.copy(\r\n                                error = result.message ?: \"\",\r\n                                isLoading = false\r\n                            )\r\n                        }\r\n                    }\r\n\r\n                    is Resource.Loading -> {\r\n                        _currencyState.update { it.copy(isLoading = true) }\r\n                    }\r\n\r\n                    is Resource.Success -> {\r\n                        _currencyState.update {\r\n                            it.copy(\r\n                                resultAmount = result.data?.data?.amount.toString(),\r\n                                isLoading = false\r\n                            )\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/concurrency/presentation/convert_screen/ConvertViewModel.kt b/app/src/main/java/com/example/concurrency/presentation/convert_screen/ConvertViewModel.kt
--- a/app/src/main/java/com/example/concurrency/presentation/convert_screen/ConvertViewModel.kt	(revision 0c812c4e9e4b99ff0b72905709e208c7cc3561e2)
+++ b/app/src/main/java/com/example/concurrency/presentation/convert_screen/ConvertViewModel.kt	(date 1693304434743)
@@ -3,10 +3,13 @@
 import android.util.Log
 import androidx.lifecycle.ViewModel
 import androidx.lifecycle.viewModelScope
+import com.example.concurrency.data.local.CurrencyEntity
+import com.example.concurrency.data.repository.CurrencyRepository
 import com.example.concurrency.domain.usecase.AllUseCases
 import com.example.concurrency.utils.Resource
 import dagger.hilt.android.lifecycle.HiltViewModel
 import kotlinx.coroutines.flow.MutableStateFlow
+import kotlinx.coroutines.flow.StateFlow
 import kotlinx.coroutines.flow.asStateFlow
 import kotlinx.coroutines.flow.collectLatest
 import kotlinx.coroutines.flow.update
@@ -16,16 +19,18 @@
 @HiltViewModel
 class ConvertViewModel @Inject constructor(
     private val useCases: AllUseCases,
+
 ) : ViewModel() {
 
-
     private val _currencyState = MutableStateFlow(CurrencyState())
     val currencyState = _currencyState.asStateFlow()
 
 
     init {
         getAllCurrencies()
+
     }
+
 
 
     fun onEvent(event: ConvertEvent) {
@@ -117,6 +122,7 @@
     }
 
 
+
 }
 
 
@@ -135,3 +141,4 @@
 
 
 
+
Index: app/src/main/java/com/example/concurrency/presentation/convert_screen/ConvertScreen.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.concurrency.presentation.convert_screen\r\n\r\n\r\nimport androidx.compose.foundation.Image\r\nimport androidx.compose.foundation.background\r\nimport androidx.compose.foundation.border\r\nimport androidx.compose.foundation.layout.Arrangement\r\nimport androidx.compose.foundation.layout.Box\r\nimport androidx.compose.foundation.layout.Column\r\nimport androidx.compose.foundation.layout.Row\r\nimport androidx.compose.foundation.layout.Spacer\r\nimport androidx.compose.foundation.layout.fillMaxWidth\r\nimport androidx.compose.foundation.layout.height\r\nimport androidx.compose.foundation.layout.padding\r\nimport androidx.compose.foundation.layout.size\r\nimport androidx.compose.foundation.layout.width\r\nimport androidx.compose.foundation.lazy.LazyColumn\r\nimport androidx.compose.foundation.shape.CircleShape\r\nimport androidx.compose.foundation.shape.RoundedCornerShape\r\nimport androidx.compose.foundation.text.KeyboardOptions\r\nimport androidx.compose.material.icons.Icons\r\nimport androidx.compose.material.icons.filled.Add\r\nimport androidx.compose.material3.Button\r\nimport androidx.compose.material3.ButtonDefaults\r\nimport androidx.compose.material3.CircularProgressIndicator\r\nimport androidx.compose.material3.Divider\r\nimport androidx.compose.material3.DropdownMenuItem\r\nimport androidx.compose.material3.ExperimentalMaterial3Api\r\nimport androidx.compose.material3.ExposedDropdownMenuBox\r\nimport androidx.compose.material3.ExposedDropdownMenuDefaults\r\nimport androidx.compose.material3.Icon\r\nimport androidx.compose.material3.OutlinedTextField\r\nimport androidx.compose.material3.Text\r\nimport androidx.compose.runtime.Composable\r\nimport androidx.compose.runtime.getValue\r\nimport androidx.compose.runtime.mutableStateOf\r\nimport androidx.compose.runtime.remember\r\nimport androidx.compose.runtime.setValue\r\nimport androidx.compose.ui.Alignment\r\nimport androidx.compose.ui.Modifier\r\nimport androidx.compose.ui.graphics.Color\r\nimport androidx.compose.ui.res.painterResource\r\nimport androidx.compose.ui.text.TextStyle\r\nimport androidx.compose.ui.text.font.FontWeight\r\nimport androidx.compose.ui.text.input.KeyboardType\r\nimport androidx.compose.ui.unit.dp\r\nimport androidx.compose.ui.unit.sp\r\nimport coil.compose.AsyncImage\r\nimport com.example.concurrency.presentation.favorite_screen.FavoriteBottomSheet\r\nimport com.example.concurrency.R\r\nimport com.example.concurrency.ui.theme.ButtonColor\r\nimport com.example.concurrency.ui.theme.FiledBackground\r\n\r\n\r\n@Composable\r\nfun ConvertScreen(\r\n    state: CurrencyState,\r\n    onEvent: (ConvertEvent) -> Unit\r\n) {\r\n\r\n\r\n    var isSheetEnabled by remember {\r\n        mutableStateOf(false)\r\n    }\r\n\r\n    if (state.isLoading) {\r\n        CircularProgressIndicator()\r\n    }\r\n\r\n    ConvertItem(state, onEvent)\r\n\r\n    Button(\r\n        onClick = {\r\n            onEvent(\r\n                ConvertEvent.GetConvertedCurrency(\r\n                    state.base.base,\r\n                    state.target.target,\r\n                    state.amount.toDouble(),\r\n                )\r\n            )\r\n        },\r\n        shape = CircleShape,\r\n        colors = ButtonDefaults.buttonColors(ButtonColor),\r\n        modifier = Modifier\r\n            .fillMaxWidth()\r\n            .height(80.dp)\r\n            .padding(16.dp)\r\n    ) {\r\n        Text(\r\n            text = \"Convert\",\r\n            style = TextStyle(\r\n                fontSize = 16.sp,\r\n                fontWeight = FontWeight(700),\r\n                color = Color.White\r\n            )\r\n        )\r\n    }\r\n\r\n    Spacer(modifier = Modifier.height(5.dp))\r\n\r\n\r\n    Divider(\r\n        color = Color.LightGray, modifier = Modifier.padding(start = 16.dp, end = 16.dp)\r\n    )\r\n\r\n    Spacer(modifier = Modifier.height(10.dp))\r\n\r\n    Row(\r\n        modifier = Modifier\r\n            .fillMaxWidth()\r\n            .padding(16.dp),\r\n        horizontalArrangement = Arrangement.SpaceBetween, // This will align the text to the start and the button to the end\r\n        verticalAlignment = Alignment.CenterVertically\r\n    ) {\r\n        Text(\r\n            text = \"live exchange rates\",\r\n            modifier = Modifier,\r\n            style = TextStyle(\r\n                fontSize = 16.sp,\r\n                fontWeight = FontWeight(600),\r\n                color = Color(0xFF202020),\r\n            )\r\n        )\r\n\r\n        Button(\r\n            onClick = { isSheetEnabled = true },\r\n            colors = ButtonDefaults.buttonColors(Color.White),\r\n            shape = RoundedCornerShape(20.dp),\r\n            modifier = Modifier.border(\r\n                width = 1.dp,\r\n                color = Color(0xFF000000),\r\n                shape = RoundedCornerShape(size = 25.dp)\r\n            )\r\n        ) {\r\n            Icon(\r\n                imageVector = Icons.Default.Add,\r\n                contentDescription = null,\r\n                modifier = Modifier\r\n                    .size(24.dp)\r\n                    .border(\r\n                        width = 1.dp,\r\n                        color = Color(0xFF000000),\r\n                        shape = RoundedCornerShape(size = 18.dp)\r\n                    ),\r\n                tint = Color.Black\r\n            )\r\n            Spacer(modifier = Modifier.width(8.dp))\r\n            Text(\r\n                text = \"Add to Favorites\",\r\n                fontSize = 10.sp,\r\n                fontWeight = FontWeight(600),\r\n                color = Color(0xFF363636),\r\n            )\r\n        }\r\n    }\r\n    // Show the bottom sheet when isSheetEnabled is true\r\n    if (isSheetEnabled) {\r\n        state.currencies?.data?.let {\r\n            FavoriteBottomSheet(\r\n                onSheetDismissed = {\r\n                    isSheetEnabled = false\r\n                }, currencies = it\r\n            )\r\n        }\r\n    }\r\n\r\n\r\n    Column(\r\n        modifier = Modifier\r\n            .fillMaxWidth()\r\n            .padding(16.dp),\r\n        horizontalAlignment = Alignment.Start\r\n    ) {\r\n        // Text \"My Portfolio\"\r\n        Box {\r\n            Text(\r\n                text = \"My Portfolio\",\r\n                fontWeight = FontWeight.Bold,\r\n                fontSize = 20.sp,\r\n                modifier = Modifier.align(Alignment.TopStart)\r\n            )\r\n        }\r\n\r\n        // Lazy Column with portfolio items\r\n        LazyColumn(\r\n            modifier = Modifier.height(200.dp)\r\n        ) {\r\n            items(10) {\r\n                Row(\r\n                    modifier = Modifier\r\n                        .fillMaxWidth()\r\n                        .padding(vertical = 8.dp),\r\n                    verticalAlignment = Alignment.CenterVertically\r\n                ) {\r\n                    // Leading Icon\r\n                    Image(\r\n                        painter = painterResource(id = R.drawable.united_kingdom_1),\r\n                        contentDescription = null,\r\n                    )\r\n\r\n                    Spacer(modifier = Modifier.width(8.dp))\r\n\r\n                    // Two Text Elements Stacked Vertically\r\n                    Column {\r\n                        Text(\r\n                            text = \"USD\",\r\n                            fontSize = 16.sp\r\n                        )\r\n                        Text(\r\n\r\n                            text = \"CURRENCY\",\r\n                            fontSize = 16.sp,\r\n                            fontWeight = FontWeight(50)\r\n                        )\r\n                    }\r\n\r\n                    Spacer(modifier = Modifier.weight(1f))\r\n\r\n                    // Third Text Element at the End of the Row\r\n                    Text(\r\n                        text = \"$29,850.15\",\r\n                        fontSize = 16.sp\r\n                    )\r\n                }\r\n            }\r\n        }\r\n\r\n\r\n    }\r\n\r\n}\r\n\r\n@OptIn(ExperimentalMaterial3Api::class)\r\n@Composable\r\nfun ConvertItem(\r\n    state: CurrencyState,\r\n    onEvent: (ConvertEvent) -> Unit\r\n) {\r\n\r\n\r\n    var expandedFrom by remember {\r\n        mutableStateOf(false)\r\n    }\r\n    var expandedTo by remember {\r\n        mutableStateOf(false)\r\n    }\r\n\r\n    Row(\r\n        modifier = Modifier\r\n            .fillMaxWidth()\r\n            .padding(16.dp),\r\n        horizontalArrangement = Arrangement.spacedBy(8.dp)\r\n    ) {\r\n\r\n        Column(\r\n            modifier = Modifier\r\n                .padding(6.dp)\r\n                .weight(1f),\r\n            verticalArrangement = Arrangement.spacedBy(12.dp)\r\n        ) {\r\n\r\n            Text(\r\n                text = \"Amount\",\r\n                style = TextStyle(\r\n                    fontSize = 16.sp,\r\n                    fontWeight = FontWeight(600),\r\n                    color = Color(0xFF000000),\r\n                )\r\n            )\r\n\r\n            OutlinedTextField(\r\n                value = state.amount,\r\n                onValueChange = { onEvent(ConvertEvent.SetBaseAmount(it)) },\r\n                shape = CircleShape,\r\n                maxLines = 1,\r\n                keyboardOptions = KeyboardOptions.Default.copy(\r\n                    keyboardType = KeyboardType.Number\r\n                ),\r\n                modifier = Modifier.background(FiledBackground)\r\n            )\r\n\r\n\r\n\r\n            Text(\r\n                text = \"To\",\r\n                style = TextStyle(\r\n                    fontSize = 16.sp,\r\n                    fontWeight = FontWeight(600),\r\n                    color = Color(0xFF000000),\r\n                )\r\n            )\r\n\r\n            // To Currency DropMenu\r\n            ExposedDropdownMenuBox(\r\n                expanded = expandedTo,\r\n                onExpandedChange = { expandedTo = it },\r\n            ) {\r\n\r\n                OutlinedTextField(\r\n                    value = state.target.target, // Use the selected currency as the value\r\n                    onValueChange = {\r\n                        onEvent(\r\n                            ConvertEvent.SetTarget(\r\n                                Target(\r\n                                    target = it,\r\n                                    imageUrl = \"\"\r\n                                )\r\n                            )\r\n                        )\r\n                    },\r\n                    readOnly = true,\r\n                    shape = CircleShape,\r\n                    enabled = false,\r\n                    maxLines = 1,\r\n                    trailingIcon = {\r\n                        ExposedDropdownMenuDefaults.TrailingIcon(\r\n                            expanded = expandedTo\r\n                        )\r\n                    },\r\n                    leadingIcon = {\r\n                        AsyncImage(model = state.target.imageUrl, contentDescription = \"\")\r\n                    },\r\n                    modifier = Modifier\r\n                        .background(FiledBackground)\r\n                        .menuAnchor(),\r\n\r\n                    )\r\n\r\n                ExposedDropdownMenu(\r\n                    expanded = expandedTo,\r\n                    onDismissRequest = { expandedTo = false }\r\n                ) {\r\n\r\n                    state.currencies?.data?.forEach { currency ->\r\n                        DropdownMenuItem(\r\n                            text = { Text(text = currency.code) },\r\n                            onClick = {\r\n                                onEvent(\r\n                                    ConvertEvent.SetTarget(\r\n                                        Target(\r\n                                            target = currency.code,\r\n                                            imageUrl = currency.imageUrl\r\n                                        )\r\n                                    )\r\n                                ) // Update the selected currency when clicked\r\n                                expandedTo = false\r\n                            },\r\n                            leadingIcon = {\r\n                                AsyncImage(model = currency.imageUrl, contentDescription = \"\")\r\n                            }\r\n                        )\r\n                    }\r\n                }\r\n\r\n            }\r\n\r\n\r\n        }\r\n\r\n\r\n        Column(\r\n            modifier = Modifier\r\n                .padding(6.dp)\r\n                .weight(1f),\r\n            verticalArrangement = Arrangement.spacedBy(12.dp)\r\n        ) {\r\n\r\n            Text(\r\n                text = \"From\",\r\n                style = TextStyle(\r\n                    fontSize = 16.sp,\r\n                    fontWeight = FontWeight(600),\r\n                    color = Color(0xFF000000),\r\n                )\r\n            )\r\n\r\n            ExposedDropdownMenuBox(\r\n                expanded = expandedFrom,\r\n                onExpandedChange = { expandedFrom = !expandedFrom },\r\n            ) {\r\n\r\n                OutlinedTextField(\r\n                    value = state.base.base,\r\n                    onValueChange = {\r\n                        onEvent(\r\n                            ConvertEvent.SetBase(\r\n                                Base(\r\n                                    base = it,\r\n                                    imageUrl = \"\"\r\n                                )\r\n                            )\r\n                        )\r\n                    },\r\n                    readOnly = true,\r\n                    shape = CircleShape,\r\n                    maxLines = 1,\r\n                    trailingIcon = {\r\n                        ExposedDropdownMenuDefaults.TrailingIcon(\r\n                            expanded = expandedFrom\r\n                        )\r\n                    },\r\n                    leadingIcon = {\r\n                        AsyncImage(model = state.base.imageUrl, contentDescription = \"\")\r\n\r\n                    },\r\n                    modifier = Modifier\r\n                        .background(FiledBackground)\r\n                        .menuAnchor()\r\n\r\n                )\r\n\r\n                ExposedDropdownMenu(\r\n                    expanded = expandedFrom,\r\n                    onDismissRequest = { expandedFrom = false }\r\n                ) {\r\n\r\n                    state.currencies?.data?.let {\r\n                        it.forEach { currency ->\r\n                            DropdownMenuItem(\r\n                                text = { Text(text = currency.code) },\r\n                                onClick = {\r\n                                    onEvent(\r\n                                        ConvertEvent.SetBase(\r\n                                            Base(\r\n                                                base = currency.code,\r\n                                                imageUrl = currency.imageUrl\r\n                                            )\r\n                                        )\r\n                                    ) // Update the selected currency when clicked\r\n                                    expandedFrom = false\r\n                                },\r\n                                leadingIcon = {\r\n                                    AsyncImage(model = currency.imageUrl, contentDescription = \"\")\r\n                                }\r\n\r\n                            )\r\n                        }\r\n                    }\r\n\r\n                }\r\n\r\n            }\r\n\r\n\r\n\r\n            Text(\r\n                text = \"Amount\",\r\n                style = TextStyle(\r\n                    fontSize = 16.sp,\r\n                    fontWeight = FontWeight(600),\r\n                    color = Color(0xFF000000),\r\n                )\r\n            )\r\n\r\n            OutlinedTextField(\r\n                value = state.resultAmount,\r\n                onValueChange = {},\r\n                shape = CircleShape,\r\n                maxLines = 1,\r\n                keyboardOptions = KeyboardOptions.Default.copy(\r\n                    keyboardType = KeyboardType.Number\r\n                ),\r\n                modifier = Modifier.background(FiledBackground)\r\n            )\r\n\r\n        }\r\n\r\n    }\r\n}\r\n\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/concurrency/presentation/convert_screen/ConvertScreen.kt b/app/src/main/java/com/example/concurrency/presentation/convert_screen/ConvertScreen.kt
--- a/app/src/main/java/com/example/concurrency/presentation/convert_screen/ConvertScreen.kt	(revision 0c812c4e9e4b99ff0b72905709e208c7cc3561e2)
+++ b/app/src/main/java/com/example/concurrency/presentation/convert_screen/ConvertScreen.kt	(date 1693304434743)
@@ -32,6 +32,7 @@
 import androidx.compose.material3.OutlinedTextField
 import androidx.compose.material3.Text
 import androidx.compose.runtime.Composable
+import androidx.compose.runtime.collectAsState
 import androidx.compose.runtime.getValue
 import androidx.compose.runtime.mutableStateOf
 import androidx.compose.runtime.remember
@@ -58,7 +59,6 @@
     onEvent: (ConvertEvent) -> Unit
 ) {
 
-
     var isSheetEnabled by remember {
         mutableStateOf(false)
     }
Index: app/src/main/java/com/example/concurrency/CurrencyApplication.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.concurrency\r\n\r\nimport android.app.Application\r\nimport dagger.hilt.android.HiltAndroidApp\r\n\r\n@HiltAndroidApp\r\nclass CurrencyApplication: Application()
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/concurrency/CurrencyApplication.kt b/app/src/main/java/com/example/concurrency/CurrencyApplication.kt
--- a/app/src/main/java/com/example/concurrency/CurrencyApplication.kt	(revision 0c812c4e9e4b99ff0b72905709e208c7cc3561e2)
+++ b/app/src/main/java/com/example/concurrency/CurrencyApplication.kt	(date 1693304434743)
@@ -1,7 +1,16 @@
 package com.example.concurrency
 
 import android.app.Application
+import com.example.concurrency.data.local.FavoriteDatabase
 import dagger.hilt.android.HiltAndroidApp
 
 @HiltAndroidApp
-class CurrencyApplication: Application()
\ No newline at end of file
+class CurrencyApplication: Application(){
+
+        override fun onCreate() {
+            super.onCreate()
+            // Initialize your singleton database instance here
+            FavoriteDatabase.getInstance(this)
+        }
+
+}
\ No newline at end of file
Index: app/src/main/java/com/example/concurrency/domain/di/NetworkModule.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.concurrency.domain.di\r\n\r\nimport com.example.concurrency.data.remote.CurrencyApi\r\nimport com.example.concurrency.data.repository.CurrencyRepository\r\nimport com.example.concurrency.domain.usecase.AllUseCases\r\nimport com.example.concurrency.domain.usecase.GetAllCurrenciesUseCase\r\nimport com.example.concurrency.domain.usecase.GetCompareCurrencyUseCase\r\nimport com.example.concurrency.domain.usecase.GetConvertCurrencyUseCase\r\nimport com.example.concurrency.utils.Constant.BASE_URL\r\nimport dagger.Module\r\nimport dagger.Provides\r\nimport dagger.hilt.InstallIn\r\nimport dagger.hilt.components.SingletonComponent\r\nimport okhttp3.OkHttpClient\r\nimport okhttp3.logging.HttpLoggingInterceptor\r\nimport retrofit2.Retrofit\r\nimport retrofit2.converter.gson.GsonConverterFactory\r\nimport java.util.concurrent.TimeUnit\r\nimport javax.inject.Singleton\r\n\r\n\r\n@Module\r\n@InstallIn(SingletonComponent::class)\r\nobject NetworkModule {\r\n\r\n\r\n    @Provides\r\n    @Singleton\r\n    fun getUnsafeOkHttpClient(): OkHttpClient {\r\n        val interceptor = HttpLoggingInterceptor()\r\n        interceptor.level = HttpLoggingInterceptor.Level.BODY\r\n        val builder = OkHttpClient.Builder()\r\n        builder.addInterceptor(interceptor)\r\n        return builder.build()\r\n    }\r\n\r\n    @Provides\r\n    @Singleton\r\n    fun provideRetrofitInstance(okHttpClient: OkHttpClient): Retrofit {\r\n        return Retrofit.Builder()\r\n            .baseUrl(BASE_URL)\r\n            .client(okHttpClient)\r\n            .addConverterFactory(GsonConverterFactory.create())\r\n            .build()\r\n    }\r\n\r\n\r\n    @Provides\r\n    @Singleton\r\n    fun provideCurrencyApi(retrofit: Retrofit): CurrencyApi {\r\n        return retrofit.create(CurrencyApi::class.java)\r\n    }\r\n\r\n    @Provides\r\n    @Singleton\r\n    fun provideCurrencyRepository(\r\n        api: CurrencyApi\r\n    ): CurrencyRepository {\r\n        return CurrencyRepository(api)\r\n    }\r\n\r\n\r\n    @Provides\r\n    @Singleton\r\n    fun provideAllUseCases(\r\n        getConvertCurrencyUseCase: GetConvertCurrencyUseCase,\r\n        getCompareCurrencyUseCase: GetCompareCurrencyUseCase,\r\n        getAllCurrenciesUseCase: GetAllCurrenciesUseCase\r\n    ): AllUseCases {\r\n        return AllUseCases(\r\n            getConvertCurrencyUseCase = getConvertCurrencyUseCase,\r\n            getCompareCurrencyUseCase = getCompareCurrencyUseCase,\r\n            getAllCurrenciesUseCase = getAllCurrenciesUseCase\r\n        )\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/concurrency/domain/di/NetworkModule.kt b/app/src/main/java/com/example/concurrency/domain/di/NetworkModule.kt
--- a/app/src/main/java/com/example/concurrency/domain/di/NetworkModule.kt	(revision 0c812c4e9e4b99ff0b72905709e208c7cc3561e2)
+++ b/app/src/main/java/com/example/concurrency/domain/di/NetworkModule.kt	(date 1693304434743)
@@ -15,7 +15,6 @@
 import okhttp3.logging.HttpLoggingInterceptor
 import retrofit2.Retrofit
 import retrofit2.converter.gson.GsonConverterFactory
-import java.util.concurrent.TimeUnit
 import javax.inject.Singleton
 
 
Index: app/src/main/java/com/example/concurrency/data/remote/model/Currencies.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.concurrency.data.remote.model\r\n\r\n\r\ndata class Currencies(\r\n    val data: List<DataX>,\r\n    val isSuccess: Boolean,\r\n    val statusCode: Int\r\n)
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/concurrency/data/remote/model/Currencies.kt b/app/src/main/java/com/example/concurrency/data/remote/model/Currencies.kt
--- a/app/src/main/java/com/example/concurrency/data/remote/model/Currencies.kt	(revision 0c812c4e9e4b99ff0b72905709e208c7cc3561e2)
+++ b/app/src/main/java/com/example/concurrency/data/remote/model/Currencies.kt	(date 1693304434743)
@@ -1,6 +1,5 @@
 package com.example.concurrency.data.remote.model
 
-
 data class Currencies(
     val data: List<DataX>,
     val isSuccess: Boolean,
